<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>OTRSSqlQueriesHistory</Name>
    <Version>1.0.0</Version>
    <Vendor>bieli.net</Vendor>
    <URL>http://bieli.net/</URL>
    <License>This source code is published under GPL v3 licence</License>
    <Description Lang="en">This OTRS 3 package extends AdminSelectBox module for storing SQL queries history.</Description>
    <Description Lang="pl">Moduł ten rozszerza moduł AdminSelectBox o składowanie historii zapytań SQL.</Description>
    <Framework>3.0.x</Framework>
    <Framework>3.1.x</Framework>
    <BuildDate>2013-03-11 23:10:51</BuildDate>
    <BuildHost>yourhost.example.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/OTRSSqlQueriesHistory.xml" Permission="666" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIxLjAiIGluaXQ9IkFwcGxpY2F0aW9uIj4KICAgIDxDVlM+JElkOiBPVFJTU3FsUXVlcmllc0hpc3RvcnkueG1sLHYgMS4wLjAuMCAyMDEyLzA5LzIyIDIxOjEyOjIgYmllbGkgRXhwICQ8L0NWUz4KICAgIDxDb25maWdJdGVtIE5hbWU9IkZyb250ZW5kOjpNb2R1bGUjIyNBZG1pblNlbGVjdEJveCIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPkZyYW1ld29yazwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkZyb250ZW5kOjpBZG1pbjo6TW9kdWxlUmVnaXN0cmF0aW9uPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEZyb250ZW5kTW9kdWxlUmVnPgogICAgICAgICAgICAgICAgPEdyb3VwPmFkbWluPC9Hcm91cD4KICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvbj5BZG1pbjwvRGVzY3JpcHRpb24+CiAgICAgICAgICAgICAgICA8VGl0bGU+U1FMIEJveDwvVGl0bGU+CiAgICAgICAgICAgICAgICA8TmF2QmFyTmFtZT5BZG1pbjwvTmF2QmFyTmFtZT4KICAgICAgICAgICAgICAgIDxOYXZCYXJNb2R1bGU+CiAgICAgICAgICAgICAgICAgICAgPE1vZHVsZT5LZXJuZWw6Ok91dHB1dDo6SFRNTDo6TmF2QmFyTW9kdWxlQWRtaW48L01vZHVsZT4KICAgICAgICAgICAgICAgICAgICA8TmFtZSBUcmFuc2xhdGFibGU9IjEiPlNRTCBCb3g8L05hbWU+CiAgICAgICAgICAgICAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RXhlY3V0ZSBTUUwgc3RhdGVtZW50cy48L0Rlc2NyaXB0aW9uPgogICAgICAgICAgICAgICAgICAgIDxCbG9jaz5TeXN0ZW08L0Jsb2NrPgogICAgICAgICAgICAgICAgICAgIDxQcmlvPjcwMDwvUHJpbz4KICAgICAgICAgICAgICAgIDwvTmF2QmFyTW9kdWxlPgogICAgICAgICAgICAgICAgPExvYWRlcj4KICAgICAgICAgICAgICAgICAgICA8SmF2YVNjcmlwdD50aGlyZHBhcnR5L2pzdG9yYWdlL2pzdG9yYWdlLmpzPC9KYXZhU2NyaXB0PgogICAgICAgICAgICAgICAgICAgIDxKYXZhU2NyaXB0PkNvcmUuQWdlbnQuQWRtaW4uQWRtaW5TZWxlY3RCb3guanM8L0phdmFTY3JpcHQ+CiAgICAgICAgICAgICAgICA8L0xvYWRlcj4KICAgICAgICAgICAgPC9Gcm9udGVuZE1vZHVsZVJlZz4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+Cjwvb3Ryc19jb25maWc+Cgo=</File>
        <File Location="var/httpd/htdocs/js/thirdparty/jstorage/jstorage.js" Permission="666" Encode="Base64"></File>
        <File Location="var/httpd/htdocs/js/Core.Agent.Admin.AdminSelectBox.js" Permission="666" Encode="Base64">Ly8gLS0KLy8gQ29yZS5BZ2VudC5BZG1pbi5BZG1pblNlbGVjdEJveC5qcyAtIHByb3ZpZGVzIHRoZSBzcGVjaWFsIG1vZHVsZSBmdW5jdGlvbnMgZm9yIHRoZSBBZG1pblNlbGVjdEJveAovLyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMyBiaWVsaSwgaHR0cDovL2JpZWxpLm5ldC8KLy8gLS0KLy8gJElkOiBDb3JlLkFnZW50LkFkbWluLkFkbWluU2VsZWN0Qm94LmpzLHYgMS4wLjAuMCAyMDEyLzA5LzIwIDE2OjE1OjM0IGJpZWxpIEV4cCAkCi8vIC0tCi8vIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCi8vIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKLy8gZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KLy8gLS0KCiJ1c2Ugc3RyaWN0IjsKCnZhciBDb3JlID0gQ29yZSB8fCB7fTsKQ29yZS5BZ2VudCA9IENvcmUuQWdlbnQgfHwge307CkNvcmUuQWdlbnQuQWRtaW4gPSBDb3JlLkFnZW50LkFkbWluIHx8IHt9OwoKLyoqCiAqIEBuYW1lc3BhY2UgICBBZG1pblNlbGVjdEJveAogKiBAZXhwb3J0cyAgICAgVGFyZ2V0TlMgYXMgQ29yZS5BZ2VudC5BZG1pbi5BZG1pblNlbGVjdEJveAogKiBAZGVzY3JpcHRpb24gCiAqICAgICAgVGhpcyBuYW1lc3BhY2UgY29udGFpbnMgdGhlIHNwZWNpYWwgbW9kdWxlIGZ1bmN0aW9ucyBmb3IgdGhlIEFkbWluU2VsZWN0Qm94IG1vZHVsZS4KICovCkNvcmUuQWdlbnQuQWRtaW4uQWRtaW5TZWxlY3RCb3ggPSAoZnVuY3Rpb24gKFRhcmdldE5TKSB7CgogICAgZnVuY3Rpb24gYWRkQmxvY2soKSB7CiAgICAgICAgJCgnZGl2LlNpZGViYXJDb2x1bW4nKS5hcHBlbmQoJzxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+PGRpdiBjbGFzcz0iSGVhZGVyIj48aDI+U1FMIFF1ZXJpZXMgSGlzdG9yeTwvaDI+PC9kaXY+PGRpdiBjbGFzcz0iQ29udGVudCI+PHA+PHVsIGlkPSJzcWxfcXVlcmllcyI+PC91bD48L3A+PC9kaXY+PC9kaXY+Jyk7CiAgICB9OwoKICAgIGZ1bmN0aW9uIGxvYWRMaXN0KCkgewogICAgICAgIHZhciBzcWxfcXVlcmllcyA9ICQualN0b3JhZ2UuZ2V0KCdvdHJzX3NxbF9xdWVyaWVzX2hpc3RvcnknKTsgICAgCiAgICAgICAgICAgIGlmIChzcWxfcXVlcmllcykgewogICAgICAgICAgICAgICAgdmFyIGxhc3QgPSAiIjsKICAgICAgICAgICAgICAgIHZhciBpdGVtID0gMTsKCiAgICAgICAgICAgICAgICBzcWxfcXVlcmllcy5mb3JFYWNoKCBmdW5jdGlvbihrLCB2KSB7IAoKICAgICAgICAgICAgICAgIGlmICggbGFzdCAhPSBrLnF1ZXJ5ICkgewogICAgICAgICAgICAgICAgICAkKCd1bCNzcWxfcXVlcmllcycpLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAgICQoJzxsaT4nKQogICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGsucXVlcnkuc2xpY2UoMCwgMzApICsgJyBbLi5dICcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RpdGxlJywgay5xdWVyeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8YnV0dG9uPicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnc3FoX2J0bl8nICsgaXRlbSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdzcWhfYnRuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHlsZScsICdoZWlnaHQ6IDIycHg7IHdpZHRoOiAyMnB4OyBmb250LXNpemU6IDE0cHg7JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCduYW1lJywgJ3NxaF9idG5fJyArIGl0ZW0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS10aW1lc3RhbXAnLCBrLnRpbWVzdGFtcCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXF1ZXJ5Jywgay5xdWVyeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KCLih5IiKQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8YnV0dG9uPicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnc3FoX2J0bl9kZWxldGVfJyArIGl0ZW0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnc3FoX2J0bicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3R5bGUnLCAnaGVpZ2h0OiAyMnB4OyB3aWR0aDogMjJweDsgZm9udC1zaXplOiAxNHB4OycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignbmFtZScsICdzcWhfYnRuX2RlbGV0ZV8nICsgaXRlbSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXRpbWVzdGFtcCcsIGsudGltZXN0YW1wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoIngiKQogICAgICAgICAgICAgICAgICApKTsKCiAgICAgICAgICAgICAgICAgIGxhc3QgPSBrLnF1ZXJ5OwogICAgICAgICAgICAgICAgICBpdGVtKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gdXBkYXRlTGlzdChzcWxfcXVlcnkpIHsKICAgICAgICB2YXIgc3FsX3F1ZXJpZXMgPSAkLmpTdG9yYWdlLmdldCgnb3Ryc19zcWxfcXVlcmllc19oaXN0b3J5Jyk7ICAgIAogICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSArbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7CgogICAgICAgIGlmIChzcWxfcXVlcmllcykgewogICAgICAgICAgICByZXN1bHQgPSBmYWxzZTsKCiAgICAgICAgICAgIHNxbF9xdWVyaWVzLmZvckVhY2goIGZ1bmN0aW9uKGssIHYpIHsgCiAgICAgICAgICAgICAgICBpZiAoIHNxbF9xdWVyeS50cmltKCkgPT0gay5xdWVyeS50cmltKCkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlOwogICAgICAgICAgICBzcWxfcXVlcmllcyA9IFtdOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAoIHJlc3VsdCA9PSBmYWxzZSApIHsKICAgICAgICAgICAgc3FsX3F1ZXJpZXMucHVzaCh7ICd0aW1lc3RhbXAnIDogbWlsbGlzZWNvbmRzLCAncXVlcnknIDogc3FsX3F1ZXJ5LnRyaW0oKSB9KTsKCiAgICAgICAgICAgICQualN0b3JhZ2Uuc2V0KCdvdHJzX3NxbF9xdWVyaWVzX2hpc3RvcnknLCBzcWxfcXVlcmllcyk7CiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIEBmdW5jdGlvbgogICAgICogQHJldHVybiBub3RoaW5nCiAgICAgKiAgICAgIFRoaXMgZnVuY3Rpb24gaW5pdGlhbGl6ZXMgdGhlIHNwZWNpYWwgbW9kdWxlIGZ1bmN0aW9ucwogICAgICovCiAgICBUYXJnZXROUy5Jbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICQoJyNSdW4nKS51bmJpbmQoJ2NsaWNrJykuY2xpY2soIGZ1bmN0aW9uICgpewogICAgICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gK25ldyBEYXRlKCkuZ2V0VGltZSgpOwoKICAgICAgICAgICAgdmFyIHNxbF9xdWVyeSA9ICQoJyNTUUwnKS52YWwoKS50cmltKCkgKyAiIExJTUlUICIgKyAkKCcjTWF4JykudmFsKCkudHJpbSgpOwoKICAgICAgICAgICAgdXBkYXRlTGlzdChzcWxfcXVlcnkpOwoKICAgICAgICAgICAgbG9hZExpc3QoKTsKICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgJCgndWwjc3FsX3F1ZXJpZXMgbGkgYnV0dG9uW2lkXj0ic3FoX2J0bl8iXScpLnVuYmluZCgnY2xpY2snKS5jbGljayggZnVuY3Rpb24gKCl7CiAgICAgICAgICAgIHZhciBzcWxfcXVlcnkgPSAkKHRoaXMpLmRhdGEoInF1ZXJ5Iik7CgogICAgICAgICAgICAkKCcjU1FMJykudmFsKHNxbF9xdWVyeSk7CgogICAgICAgICAgICBsb2FkTGlzdCgpOwogICAgICAgIH0pOwoKICAgICAgICAkKCd1bCNzcWxfcXVlcmllcyBsaSBidXR0b25baWRePSJzcWhfYnRuX2RlbGV0ZV8iXScpLnVuYmluZCgnY2xpY2snKS5jbGljayggZnVuY3Rpb24gKCl7CiAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlKCk7CiAgICAgICAgfSk7CgogICAgICAgIGFkZEJsb2NrKCk7CgogICAgICAgIGxvYWRMaXN0KCk7CiAgICB9OwoKICAgIHJldHVybiBUYXJnZXROUzsKfShDb3JlLkFnZW50LkFkbWluLkFkbWluU2VsZWN0Qm94IHx8IHt9KSk7CgpDb3JlLkFnZW50LkFkbWluLkFkbWluU2VsZWN0Qm94LkluaXQoKTsKCg==</File>
    </Filelist>
</otrs_package>